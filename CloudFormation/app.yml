#####################################################
# app.yml
#
# Author: Denes Solti
# Project: Warehouse API (boilerplate)
# License: MIT
#####################################################
Description: App infrastructure. Can be deployed in any region

Parameters:
  deploymentId:
    Type: String
    Description: Unique deployment id
  prefix:
    Type: String
    Description: The prefix for this full deployment.
    MaxLength: '14'
  scalingCpuUsageThreshold:
    Type: Number
    Description: Average CPU usage that triggers scaling
  scalingMinInstances:
    Type: Number
    Description: The minimum autoscaling capacity
  scalingMaxInstances:
    Type: Number
    Description: The maximum autoscaling capacity
  port:
    Type: Number
    Description: Port on which the service will be listening
    Default: 1986
  healthCheckInterval:
    Type: Number
    Description: Seconds after which a new healthcheck cycle should be triggered
    Default: 60

Resources:
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub "${prefix}-warehouse-services-cluster"
      TaskDefinition: !Ref ServiceTaskDefinition
      LoadBalancers:
        - ContainerName: !Sub "${AWS::StackName}-task"
          ContainerPort: !Ref port
          TargetGroupArn: !Ref ServiceTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - Fn::ImportValue: !Sub "${prefix}-warehouse-vpc-private-subnet-1-id"
            - Fn::ImportValue: !Sub "${prefix}-warehouse-vpc-private-subnet-2-id"
      DesiredCount: 1
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      ServiceName: !Ref AWS::StackName

  ServiceAutoscalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref scalingMinInstances
      MaxCapacity: !Ref scalingMaxInstances
      ResourceId: !Join
        - "/"
        - - service
          - Fn::ImportValue: !Sub "${prefix}-warehouse-services-cluster"
          - Fn::GetAtt: Service.Name
      RoleARN: !GetAtt ServiceAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ServiceScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${AWS::StackName}-sp"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ServiceAutoscalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: !Ref scalingCpuUsageThreshold

  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: '/api/v1/healthcheck'
      HealthCheckIntervalSeconds: !Ref healthCheckInterval
      VpcId:
        Fn::ImportValue: !Sub "${prefix}-warehouse-vpc-id"
      TargetType: ip
      Port: !Ref port
      Protocol: HTTPS
      Matcher:
        HttpCode: 204

  ListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref ServiceTargetGroup
      Conditions:
        - Field: path-pattern
          Values:
            - "*"
      ListenerArn:
        Fn::ImportValue: !Sub "${prefix}-warehouse-http-listener-arn"
      Priority: 666

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Service SG
      VpcId:
        Fn::ImportValue: !Sub "${prefix}-warehouse-vpc-id"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref port
          ToPort: !Ref port
          CidrIp:
            Fn::ImportValue: !Sub "${prefix}-warehouse-vpc-public-subnet-1-cidr-ip"  # deliberately "public"
        - IpProtocol: tcp
          FromPort: !Ref port
          ToPort: !Ref port
          CidrIp:
            Fn::ImportValue: !Sub "${prefix}-warehouse-vpc-public-subnet-2-cidr-ip"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"

  ServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !Ref ServiceExecutionRole
      TaskRoleArn: !Ref ServiceTaskRole
      NetworkMode: awsvpc
      Cpu: 512
      Memory: 2048
      RequiresCompatibilities:
        - FARGATE
      ContainerDefinitions:
        - Name: !Sub "${AWS::StackName}-task"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref ServiceLogGroup
              awslogs-stream-prefix: serviceLog
          HealthCheck:
            Command:
              - CMD-SHELL
              - !Sub "curl --fail --insecure https://localhost:${port}/api/v1/healthcheck || exit 1"
            Interval: !Ref healthCheckInterval
            Retries: 2
          Environment:
            - Name: ASPNETCORE_ENVIRONMENT
              Value: !Ref prefix
            - Name: WAREHOUSE_SERVICE_PORT
              Value: !Ref port
          Image: !Join
            - ""
            - - Fn::ImportValue: !Sub "${prefix}-warehouse-ecr-repository-uri"
              - !Sub ":${prefix}-warehouse-app-"
              - !Ref deploymentId
          PortMappings:
            - ContainerPort: !Ref port

  ServiceLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub 'ecs/services/${AWS::StackName}-task'

  ###################
  # Roles
  ###################

  ServiceAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: allowAutoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - application-autoscaling:*
                  - ecs:DescribeServices
                  - ecs:UpdateService
                Resource: "*"

  ServiceExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  ServiceTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: allowSecretManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - Fn::ImportValue: !Sub "${prefix}-warehouse-db-secret-arn"
                  - Fn::ImportValue: !Sub "${prefix}-warehouse-jwt-secret-key-arn"
                  - Fn::ImportValue: !Sub "${prefix}-warehouse-root-password-arn"
                  - Fn::ImportValue: !Sub "${prefix}-warehouse-app-cert-arn"
  